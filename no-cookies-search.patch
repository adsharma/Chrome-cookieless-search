From d9af5d0c5c2a3a2ca165bb08dc7813b41b593620 Mon Sep 17 00:00:00 2001
From: Arun Sharma <asharma@fb.com>
Date: Wed, 29 Feb 2012 18:45:56 -0800
Subject: [PATCH 2/2] Works.

But has lots of VLOGs.
---
 chrome/browser/autocomplete/autocomplete_edit.cc   |    6 ++++++
 chrome/browser/ui/browser.cc                       |    6 ++++++
 chrome/browser/ui/browser_navigator.cc             |    1 +
 chrome/browser/ui/gtk/location_bar_view_gtk.cc     |    5 +++++
 chrome/browser/ui/gtk/location_bar_view_gtk.h      |    4 ++++
 chrome/browser/ui/omnibox/location_bar.h           |    3 +++
 content/browser/renderer_host/render_view_host.cc  |    2 ++
 .../renderer_host/resource_dispatcher_host.cc      |    4 +++-
 .../tab_contents/navigation_controller_impl.cc     |    7 +++++++
 content/browser/tab_contents/tab_contents.cc       |    2 ++
 content/common/resource_dispatcher.cc              |    1 +
 content/common/resource_messages.h                 |    3 +++
 content/common/view_messages.h                     |    3 +++
 content/renderer/render_view_impl.cc               |    4 +++-
 webkit/glue/resource_loader_bridge.cc              |    1 +
 webkit/glue/resource_loader_bridge.h               |    3 +++
 webkit/glue/weburlloader_impl.cc                   |    2 ++
 17 files changed, 55 insertions(+), 2 deletions(-)

diff --git a/chrome/browser/autocomplete/autocomplete_edit.cc b/chrome/browser/autocomplete/autocomplete_edit.cc
index e61a77e..11c83aa 100644
--- a/chrome/browser/autocomplete/autocomplete_edit.cc
+++ b/chrome/browser/autocomplete/autocomplete_edit.cc
@@ -602,6 +602,12 @@ void AutocompleteEditModel::OpenMatch(const AutocompleteMatch& match,
   if (match.type == AutocompleteMatch::EXTENSION_APP) {
     LaunchAppFromOmnibox(match, profile_, disposition);
   } else {
+    VLOG(1) <<  match.type;
+    if (match.type >= AutocompleteMatch::SEARCH_WHAT_YOU_TYPED
+        && match.type <= AutocompleteMatch::SEARCH_SUGGEST) {
+      ((GURL *) &match.destination_url)->SetSearchURL();
+      VLOG(1) << match.destination_url << " is search url";
+    }
     controller_->OnAutocompleteAccept(match.destination_url, disposition,
                                       match.transition, alternate_nav_url);
   }
diff --git a/chrome/browser/ui/browser.cc b/chrome/browser/ui/browser.cc
index dfb836f..890b011 100644
--- a/chrome/browser/ui/browser.cc
+++ b/chrome/browser/ui/browser.cc
@@ -1682,6 +1682,11 @@ void Browser::OpenCurrentURL() {
     return;
 
   GURL url(location_bar->GetInputString());
+  VLOG(1) << "location bar search url: " << location_bar->IsSearchURL();
+  if (location_bar->IsSearchURL())
+    url.SetSearchURL();
+  GURL url1 = url;
+  VLOG(1) << "copy search url: " << url1.IsSearchURL();
 
   if (open_disposition == CURRENT_TAB && TabFinder::IsEnabled()) {
     Browser* existing_browser = NULL;
@@ -1701,6 +1706,7 @@ void Browser::OpenCurrentURL() {
   // opener.
   params.tabstrip_add_types =
       TabStripModel::ADD_FORCE_INDEX | TabStripModel::ADD_INHERIT_OPENER;
+  VLOG(1) << "nav params is search url: " << params.url.IsSearchURL();
   browser::Navigate(&params);
 
   DCHECK(profile_->GetExtensionService());
diff --git a/chrome/browser/ui/browser_navigator.cc b/chrome/browser/ui/browser_navigator.cc
index 98b0395..b2fed8a 100644
--- a/chrome/browser/ui/browser_navigator.cc
+++ b/chrome/browser/ui/browser_navigator.cc
@@ -492,6 +492,7 @@ void Navigate(NavigateParams* params) {
           params->transition | content::PAGE_TRANSITION_HOME_PAGE);
     } else {
       url = params->url;
+      VLOG(1) << url << " " << url.IsSearchURL();
     }
 
     if (params->disposition != CURRENT_TAB) {
diff --git a/chrome/browser/ui/gtk/location_bar_view_gtk.cc b/chrome/browser/ui/gtk/location_bar_view_gtk.cc
index 0ff213e..bafb807 100644
--- a/chrome/browser/ui/gtk/location_bar_view_gtk.cc
+++ b/chrome/browser/ui/gtk/location_bar_view_gtk.cc
@@ -469,6 +469,7 @@ void LocationBarViewGtk::OnAutocompleteAccept(const GURL& url,
     const GURL& alternate_nav_url) {
   if (url.is_valid()) {
     location_input_ = UTF8ToUTF16(url.spec());
+    search_url_ = url.IsSearchURL();
     disposition_ = disposition;
     transition_ = content::PageTransitionFromInt(
         transition | content::PAGE_TRANSITION_FROM_ADDRESS_BAR);
@@ -600,6 +601,10 @@ string16 LocationBarViewGtk::GetInputString() const {
   return location_input_;
 }
 
+bool LocationBarViewGtk::IsSearchURL() const {
+  return search_url_;
+}
+
 WindowOpenDisposition LocationBarViewGtk::GetWindowOpenDisposition() const {
   return disposition_;
 }
diff --git a/chrome/browser/ui/gtk/location_bar_view_gtk.h b/chrome/browser/ui/gtk/location_bar_view_gtk.h
index 2943a1a..bb30533 100644
--- a/chrome/browser/ui/gtk/location_bar_view_gtk.h
+++ b/chrome/browser/ui/gtk/location_bar_view_gtk.h
@@ -115,6 +115,7 @@ class LocationBarViewGtk : public AutocompleteEditController,
   virtual void SetSuggestedText(const string16& text,
                                 InstantCompleteBehavior behavior) OVERRIDE;
   virtual string16 GetInputString() const OVERRIDE;
+  virtual bool IsSearchURL() const OVERRIDE;
   virtual WindowOpenDisposition GetWindowOpenDisposition() const OVERRIDE;
   virtual content::PageTransition GetPageTransition() const OVERRIDE;
   virtual void AcceptInput() OVERRIDE;
@@ -408,6 +409,9 @@ class LocationBarViewGtk : public AutocompleteEditController,
   // the LocationBar interface via GetInputString().
   string16 location_input_;
 
+  // Did the above string originate from a search query?
+  bool search_url_;
+
   // The user's desired disposition for how their input should be opened.
   WindowOpenDisposition disposition_;
 
diff --git a/chrome/browser/ui/omnibox/location_bar.h b/chrome/browser/ui/omnibox/location_bar.h
index ff28345..dc85011 100644
--- a/chrome/browser/ui/omnibox/location_bar.h
+++ b/chrome/browser/ui/omnibox/location_bar.h
@@ -40,6 +40,9 @@ class LocationBar {
   // Returns the string of text entered in the location bar.
   virtual string16 GetInputString() const = 0;
 
+  // Is the input a search query?
+  virtual bool IsSearchURL() const = 0;
+
   // Returns the WindowOpenDisposition that should be used to determine where
   // to open a URL entered in the location bar.
   virtual WindowOpenDisposition GetWindowOpenDisposition() const = 0;
diff --git a/content/browser/renderer_host/render_view_host.cc b/content/browser/renderer_host/render_view_host.cc
index 4b74771..6348525 100644
--- a/content/browser/renderer_host/render_view_host.cc
+++ b/content/browser/renderer_host/render_view_host.cc
@@ -281,6 +281,8 @@ void RenderViewHost::NavigateToURL(const GURL& url) {
   params.current_history_list_offset = -1;
   params.current_history_list_length = 0;
   params.url = url;
+  params.search_url = url.IsSearchURL();
+  VLOG(1) << url << " is search url: " << url.IsSearchURL();
   params.transition = content::PAGE_TRANSITION_LINK;
   params.navigation_type = ViewMsg_Navigate_Type::NORMAL;
   Navigate(params);
diff --git a/content/browser/renderer_host/resource_dispatcher_host.cc b/content/browser/renderer_host/resource_dispatcher_host.cc
index 5b73ae8..b54b542 100644
--- a/content/browser/renderer_host/resource_dispatcher_host.cc
+++ b/content/browser/renderer_host/resource_dispatcher_host.cc
@@ -623,7 +623,9 @@ void ResourceDispatcherHost::BeginRequest(
 
   ChildProcessSecurityPolicyImpl* policy =
       ChildProcessSecurityPolicyImpl::GetInstance();
-  if (!policy->CanUseCookiesForOrigin(child_id, request_data.url)) {
+  VLOG(1) << "search url: " << request_data.search_url << " " << request_data.url;
+  if (!policy->CanUseCookiesForOrigin(child_id, request_data.url)
+      || request_data.search_url) {
     load_flags |= (net::LOAD_DO_NOT_SEND_COOKIES |
                    net::LOAD_DO_NOT_SEND_AUTH_DATA |
                    net::LOAD_DO_NOT_SAVE_COOKIES);
diff --git a/content/browser/tab_contents/navigation_controller_impl.cc b/content/browser/tab_contents/navigation_controller_impl.cc
index 0e893bd..2b869f8 100644
--- a/content/browser/tab_contents/navigation_controller_impl.cc
+++ b/content/browser/tab_contents/navigation_controller_impl.cc
@@ -142,6 +142,9 @@ NavigationEntry* NavigationController::CreateNavigationEntry(
   BrowserURLHandler::GetInstance()->RewriteURLIfNecessary(
       &loaded_url, browser_context, &reverse_on_redirect);
 
+  // Rewriting can lose the search URL bit
+  if (url.IsSearchURL()) loaded_url.SetSearchURL();
+
   NavigationEntryImpl* entry = new NavigationEntryImpl(
       NULL,  // The site instance for tabs is sent on navigation
              // (TabContents::GetSiteInstance).
@@ -155,6 +158,7 @@ NavigationEntry* NavigationController::CreateNavigationEntry(
   entry->set_user_typed_url(url);
   entry->set_update_virtual_url_with_url(reverse_on_redirect);
   entry->set_extra_headers(extra_headers);
+  VLOG(1) << "is search url: " << entry->GetURL().IsSearchURL();
   return entry;
 }
 
@@ -354,6 +358,7 @@ void NavigationControllerImpl::LoadEntry(NavigationEntryImpl* entry) {
       content::NOTIFICATION_NAV_ENTRY_PENDING,
       content::Source<NavigationController>(this),
       content::Details<NavigationEntry>(entry));
+  VLOG(1) << entry->GetURL() << "is search url: " << entry->GetURL().IsSearchURL();
   NavigateToPendingEntry(NO_RELOAD);
 }
 
@@ -573,6 +578,8 @@ void NavigationControllerImpl::LoadURL(
   if (content::HandleDebugURL(url, transition))
     return;
 
+  VLOG(1) << url << "is search url: " << url.IsSearchURL();
+
   // The user initiated a load, we don't need to reload anymore.
   needs_reload_ = false;
 
diff --git a/content/browser/tab_contents/tab_contents.cc b/content/browser/tab_contents/tab_contents.cc
index f6dbfeb..3b366a1 100644
--- a/content/browser/tab_contents/tab_contents.cc
+++ b/content/browser/tab_contents/tab_contents.cc
@@ -186,6 +186,8 @@ void MakeNavigateParams(const NavigationEntryImpl& entry,
   params->current_history_list_offset = controller.GetLastCommittedEntryIndex();
   params->current_history_list_length = controller.GetEntryCount();
   params->url = entry.GetURL();
+  params->search_url = params->url.IsSearchURL();
+  VLOG(1) <<  params->search_url;
   params->referrer = entry.GetReferrer();
   params->transition = entry.GetTransitionType();
   params->state = entry.GetContentState();
diff --git a/content/common/resource_dispatcher.cc b/content/common/resource_dispatcher.cc
index e824c6f..652a44d 100644
--- a/content/common/resource_dispatcher.cc
+++ b/content/common/resource_dispatcher.cc
@@ -106,6 +106,7 @@ IPCResourceLoaderBridge::IPCResourceLoaderBridge(
   request_.appcache_host_id = request_info.appcache_host_id;
   request_.download_to_file = request_info.download_to_file;
   request_.has_user_gesture = request_info.has_user_gesture;
+  request_.search_url = request_info.search_url;
   if (request_info.extra_data) {
     RequestExtraData* extra_data =
         static_cast<RequestExtraData*>(request_info.extra_data);
diff --git a/content/common/resource_messages.h b/content/common/resource_messages.h
index 1771461..1a966c2 100644
--- a/content/common/resource_messages.h
+++ b/content/common/resource_messages.h
@@ -99,6 +99,9 @@ IPC_STRUCT_BEGIN(ResourceHostMsg_Request)
   // True if the request was user initiated.
   IPC_STRUCT_MEMBER(bool, has_user_gesture)
 
+  // True if the request involved a search provider
+  IPC_STRUCT_MEMBER(bool, search_url)
+
   // True if |frame_id| is the main frame of a RenderView.
   IPC_STRUCT_MEMBER(bool, is_main_frame)
 
diff --git a/content/common/view_messages.h b/content/common/view_messages.h
index 8c0d36c..67dc10f 100644
--- a/content/common/view_messages.h
+++ b/content/common/view_messages.h
@@ -570,6 +570,9 @@ IPC_STRUCT_BEGIN(ViewMsg_Navigate_Params)
   // The URL to load.
   IPC_STRUCT_MEMBER(GURL, url)
 
+  // The URL originated from a search query
+  IPC_STRUCT_MEMBER(bool, search_url)
+
   // The URL to send in the "Referer" header field. Can be empty if there is
   // no referrer.
   IPC_STRUCT_MEMBER(content::Referrer, referrer)
diff --git a/content/renderer/render_view_impl.cc b/content/renderer/render_view_impl.cc
index 3a24185..695f828 100644
--- a/content/renderer/render_view_impl.cc
+++ b/content/renderer/render_view_impl.cc
@@ -871,7 +871,9 @@ void RenderViewImpl::OnNavigate(const ViewMsg_Navigate_Params& params) {
         webkit_glue::HistoryItemFromString(params.state));
   } else {
     // Navigate to the given URL.
-    WebURLRequest request(params.url);
+    GURL url(params.url);
+    WebURLRequest request(url);
+    if (params.search_url) request.setSearchURL(true);
 
     // A session history navigation should have been accompanied by state.
     CHECK_EQ(params.page_id, -1);
diff --git a/webkit/glue/resource_loader_bridge.cc b/webkit/glue/resource_loader_bridge.cc
index 91fc25a..8cea66c 100644
--- a/webkit/glue/resource_loader_bridge.cc
+++ b/webkit/glue/resource_loader_bridge.cc
@@ -58,6 +58,7 @@ ResourceLoaderBridge::RequestInfo::RequestInfo()
       routing_id(0),
       download_to_file(false),
       has_user_gesture(false),
+      search_url(false),
       extra_data(NULL) {
 }
 
diff --git a/webkit/glue/resource_loader_bridge.h b/webkit/glue/resource_loader_bridge.h
index c86b998..f7fda10 100644
--- a/webkit/glue/resource_loader_bridge.h
+++ b/webkit/glue/resource_loader_bridge.h
@@ -256,6 +256,9 @@ class ResourceLoaderBridge {
     // True if the request was user initiated.
     bool has_user_gesture;
 
+    // True if the request was search related
+    bool search_url;
+
     // Extra data associated with this request.  We do not own this pointer.
     WebKit::WebURLRequest::ExtraData* extra_data;
 
diff --git a/webkit/glue/weburlloader_impl.cc b/webkit/glue/weburlloader_impl.cc
index 6141052..90e8a05 100644
--- a/webkit/glue/weburlloader_impl.cc
+++ b/webkit/glue/weburlloader_impl.cc
@@ -421,6 +421,8 @@ void WebURLLoaderImpl::Context::Start(
   request_info.routing_id = request.requestorID();
   request_info.download_to_file = request.downloadToFile();
   request_info.has_user_gesture = request.hasUserGesture();
+  VLOG(1) << url <<  " is search url: " << request.isSearchURL();
+  request_info.search_url = request.isSearchURL();
   request_info.extra_data = request.extraData();
   if (request.extraData()) {
     referrer_policy_ = static_cast<WebURLRequestExtraDataImpl*>(
-- 
1.7.5.4

